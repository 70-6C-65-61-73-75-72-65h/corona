/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from "workbox-core";
import { ExpirationPlugin } from "workbox-expiration";
import { precacheAndRoute, createHandlerBoundToURL } from "workbox-precaching";
import { registerRoute, setCatchHandler } from "workbox-routing";
import { StaleWhileRevalidate, CacheFirst, Strategy } from "workbox-strategies";

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
// precacheAndRoute(self.__WB_MANIFEST)
const precacheManifest = [].concat(self.__WB_MANIFEST || []);
precacheAndRoute(precacheManifest);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp("/[^/?]+\\.[^/]+$");
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== "navigate") {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith("/_")) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.REACT_APP_PUBLIC_URL + "/index.html")
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) =>
    url.origin === self.location.origin && url.pathname.endsWith(".png"), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: "images",
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener("message", (event) => {
  if (event.data && event.data.type === "SKIP_WAITING") {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.

const matchVaCFunction = ({ url, request, event }) => {
  return url.href === "https://disease.sh/v3/covid-19/vaccine/coverage";
};
const matchViHTFunction = ({ url }) => {
  return url.href === "https://disease.sh/v3/covid-19/historical/all";
};

class CacheFirstWithCatch extends CacheFirst {
  async _handle(request, handler) {
    try {
      return await CacheFirst.prototype._handle.call(this, request, handler);
    } catch (er) {
      console.log(`catched network error: ${er}`);
    }
  }
}

registerRoute(
  matchVaCFunction,
  new CacheFirstWithCatch({
    networkTimeoutSeconds: 3,
    cacheName: "vaccineTotal",
    plugins: [
      new ExpirationPlugin({
        maxEntries: 50,
      }),
    ],
  })
);

registerRoute(
  // new RegExp(/vaccine\/coverage\/countries\/[A-Z]{2}/),
  ({ url }) => {
    return url.href.match(new RegExp(/vaccine\/coverage\/countries\/[A-Z]{2}/));
  },
  new CacheFirstWithCatch({
    networkTimeoutSeconds: 3,
    cacheName: "vaccineByCountries",
    plugins: [
      new ExpirationPlugin({
        maxEntries: 50,
      }),
    ],
  })
);

registerRoute(
  matchViHTFunction,
  new CacheFirstWithCatch({
    networkTimeoutSeconds: 3,
    cacheName: "virusHistoricalTotal",
    plugins: [
      new ExpirationPlugin({
        maxEntries: 50,
      }),
    ],
  })
);

registerRoute(
  ({ url }) => {
    return url.href.match(new RegExp(/historical\/[A-Z]{2}/));
  },
  new CacheFirstWithCatch({
    networkTimeoutSeconds: 3,
    cacheName: "virusHistoricalByCountry",
    plugins: [
      new ExpirationPlugin({
        maxEntries: 50,
      }),
    ],
  })
);

setCatchHandler(async ({ event }) => {
  // The FALLBACK_URL entries must be added to the cache ahead of time, either
  // via runtime or precaching. If they are precached, then call
  // `matchPrecache(FALLBACK_URL)` (from the `workbox-precaching` package)
  // to get the response from the correct cache.
  //
  // Use event, request, and url to figure out how to respond.
  // One approach would be to use request.destination, see
  // https://medium.com/dev-channel/service-worker-caching-strategies-based-on-request-types-57411dd7652c
  switch (event.request.destination) {
    case "vaccineTotal":
      // If using precached URLs:
      // return matchPrecache(FALLBACK_HTML_URL);
      return null;

    case "vaccineByCountries":
      // If using precached URLs:
      // return matchPrecache(FALLBACK_IMAGE_URL);
      return null;

    case "virusHistoricalTotal":
      // If using precached URLs:
      // return matchPrecache(FALLBACK_FONT_URL);
      return null;
    case "virusHistoricalByCountry":
      // If using precached URLs:
      // return matchPrecache(FALLBACK_FONT_URL);
      return null;

    default:
      // If we don't have a fallback, just return an error response.
      return Response.error();
  }
});
